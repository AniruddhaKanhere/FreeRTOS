/*
 * ExperimentRunner.c
 *
 *  Created on: Mar 24, 2022
 *      Author: kanherea
 */
#include <stdio.h>
#include "common.h"

#include "ThreadSafeWrapper_Mutex.h"
#include "ThreadSafeWrapper_Queue.h"

#define USER_TASKS    2
#define USER_TASK_STACK_DEPTH    100

void vUserTask( void * args );
void vSetUserTaskPriority( UBaseType_t * puxUserTaskPriorities );

BaseType_t RunExperiment( void )
{
	BaseType_t xInitSuccess, xReturn;
	char pucTaskName[15];
	xTaskArgType_t xArgs;
	TaskHandle_t xUserTaskHandle[ USER_TASKS ];
	UBaseType_t uxUserTaskPriority[ USER_TASKS ];

#if( testUSE_QUEUE == 1 )
	BaseType_t xQueueSize = testCONFIG_QUEUE_SIZE;
	UBaseType_t uxAgentStackSize = testCONFIG_AGENT_STACK_SIZE;
	UBaseType_t uxAgentPriority = testCONFIG_AGENT_PRIORITY;

	xInitSuccess = ThreadSafeWrapper_QueueInit( xQueueSize,
			                                    uxAgentStackSize,
			                                    uxAgentPriority );
#else
	xInitSuccess = ThreadSafeWrapper_MutexInit();
#endif

    xArgs.uxUseBusyWait = testUSE_BUSY_WAIT;
    xArgs.xUseRandomValues = testUSE_RANDOM_DELAYS;
    xArgs.uxValueToSend = testMAX_SEND_DELAY;

	if( xInitSuccess == pdTRUE )
	{
		vSetUserTaskPriority( uxUserTaskPriority );

		for( int i = 0; i < USER_TASKS; i++ )
		{
			snprintf( pucTaskName, sizeof( pucTaskName ), "UserTask%d", i );

			xTaskCreate( vUserTask,
						 pucTaskName,
						 USER_TASK_STACK_DEPTH,
						 &xArgs,
						 uxUserTaskPriority[ i ],
						 &xUserTaskHandle[ i ] );
		}
	}
	else
	{
		xReturn = xInitSuccess;
	}

	return xReturn;
}


void vSetUserTaskPriority( UBaseType_t * puxUserTaskPriorities )
{
    #if( USER_TASKS != 2 )
        #error "Number of tasks need to be updated."
    #endif

	#if( testCONFIG_TEST1 == 1 )
	    puxUserTaskPriorities[ 0 ] = tskIDLE_PRIORITY;
	    puxUserTaskPriorities[ 1 ] = tskIDLE_PRIORITY;
    #elif( testCONFIG_TEST2 == 1 )
    #elif( testCONFIG_TEST3 == 1 )
    #elif( testCONFIG_TEST4 == 1 )
    #elif( testCONFIG_TEST5 == 1 )
    #endif
}

void vUserTask( void * args )
{
	xTaskArgType_t *xArgs = ( xTaskArgType_t * ) args;

    ThreadSafeWrapper_MutexSend( UBaseType_t uxValueToSend,
    		                                UBaseType_t uxUseBusyWait,
    		                                BaseType_t xUseRandomValues,
    		                                TickType_t uxTimeout );
}
