/*
 * ThreadSafeWrapper_Queue.c
 *
 *  Created on: Mar 23, 2022
 *      Author: kanherea
 */
#include "FreeRTOS.h"
#include "queue.h"
#include "task.h"

#include "ThreadSafeWrapper_Queue.h"
#include "NonThreadSafeAPI.h"

static QueueHandle_t ThreadSafeQueue = NULL;
static TaskHandle_t xAgentTaskHandle = NULL;
static BaseType_t xUseBusyWait;

static void vAgentTask( void * vArgs );

typedef struct xMessage
{
    UBaseType_t uxCount;
    UBaseType_t uxUseBusyWait;
    BaseType_t xUseRandomValues;
} xMessageType_t;

BaseType_t ThreadSafeWrapper_QueueInit( UBaseType_t xQueueSize,
										size_t uxAgentStackSize,
										UBaseType_t uxAgentPriority )
{
    BaseType_t xReturn = pdFAIL, xAgentTaskCreated;

	ThreadSafeQueue = xQueueCreate( xQueueSize, sizeof( xMessageType_t ) );

	if( ThreadSafeQueue != NULL )
	{
		xAgentTaskCreated = xTaskCreate( vAgentTask,
				                         "AgentTask",
										 uxAgentStackSize,
										 NULL,
										 uxAgentPriority,
										 &xAgentTaskHandle );

		if( xAgentTaskCreated != pdFAIL )
		{
			xReturn = pdPASS;
		}
	}

	return xReturn;
}

BaseType_t ThreadSafeWrapper_QueueSend( UBaseType_t uxValueToSend,
		                                TickType_t uxTimeout )
{
	BaseType_t xReturn;

	xReturn = xQueueSendToBack( ThreadSafeQueue, &uxValueToSend, uxTimeout );

	return xReturn;
}

static void vAgentTask( void * vArgs )
{
	configASSERT( ThreadSafeQueue != NULL );
	UBaseType_t uxReceivedValue;

	( void ) vArgs;

	if( ThreadSafeQueue != NULL )
	{
        while( 1 )
        {
        	if( xQueueReceive( ThreadSafeQueue, &uxReceivedValue, portMAX_DELAY ) == pdTRUE )
        	{
        		NonThreadSafeAPI( uxReceivedValue, xUseBusyWait );
        	}
        	else
        	{
        		/* With maximum delay, the queue receive should never fail. */
        		configASSERT( 0 );
        	}
        }
	}

	vTaskDelete( NULL );
}
